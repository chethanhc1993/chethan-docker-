yum install docker -y

yum install phython -y (optional)

docker --version

docker run -dt ubantu /bin/bash      (detach mode)=making containers from image without entering container is called detach mode that is dt

docker images (shows the images present in docker )


docker ps      (shows running containers )


docker ps -a    (shows running and stopped containers )

docker exce -dt  (docker id) /bin/bash       ( to enter  inside particular container )


docker stop (docker container id )        ( to stop container )




# ----commands:---- #

---to pull base images from public docker repository

docker pull image <imagename>

docker pull nginx or ubuntu


docker inspect image nginx  ### to check images details

docker images # to check list of images 

docker run -it imagename /bin/bash  --will enter into the container interact terminal 

docker run -dt imagename -we are not enter into the container detach terminal

docker run -dt --name <name> <imagename> 
 (to give csutome name --name)


docker ps ## to check running containers 

docker ps -a  ## to check both running and stopped containers 

docker ps -a | grep 'Exited' #to check only stopped container 



Condition-1----- running container login

## To login container ##
docker exec -it <continername or continerid> /bin/bash # to login running container

1.if you want to come out from container without stop give "ctrl p+q" or exit (container already running while login time so no impact)

condition-2-------create container from image and login 

## To login container ##
docker run -it <imagename> /bin/bash # to create container from image and also interactive (login mode)

1.if you want to come out from container without stop give "ctrl p+q"

2.if you give "exit"  container also will stop

Condition-3-------run container detach mode 

docker run -dt <imagename>  (detach mode not going to be interacted with container)

After if we want login "docker exec -it <continername or continerid> /bin/bash"


ps -ef   --to know how many processors running if it is in vm many process we can see but it is in container onle few becuase its light weight 

ps -ef | wc -l #to know number of processors request running backend






#### how to start container#####

docker start <containerid>
          or
docker start <container name>

#### how to stop container#####
docker stop <containerid> 
           or
docker stop <container name>

## docker kill comeplete terminated 
docker kill <containername>

docker pause cont_name	: to pause container
docker unpause cont_name: to unpause container
docker inspect cont_name: to get complete info of a container
docker logs <containerid>: to check the logs



## danger commands##

#### deleting process ######
## Images -----

docker rmi <imagename> ##to delete image if image is not tagging to any container weather it is running or stopped 

docker rmi <imageID> -f #forcrfully delete image even respective container weather it is running or stopped

docker system prune -a to remove all images (if images are tag to stopped containers)


 ## container ------
docker rm <containername or containerid> ### to remover stopped container

docker rm -f <container id> delete running and stopped container

docker container prune -- delete all stopped containers 

docker rm -f $(docker ps -aq) ---delete all running containers 
docker rm -f $(docker ps -aq) ---delete all running containers 







# --Enabeling port-- #

docker run -p <HOST_PORT>:<CONTAINER:PORT> IMAGE_NAME  

docker run -dt -p 3000:3000 --name project-2 ubuntu  #along port expose

===================================================================================

-------- pull jenkins----------

docker pull jenkins/jenkins

docker run -dt -p <local host port>:<container run port> --name <name of the container> <name of the image>

docker run -dt -p 8081:8080 --name jenkins container jenkins/jenkin

access the jenkins with public ip and port number (8081)


============================================================
              #  IMAGE PUSH #
======================================================================

######### docker push to Docker private repository  #########
docker login first
docker tag <image> dockerusername/<image>
docker push <dockerusername>/<image>
docker pull <dockerusername>/<image>

================================================================

######### docker push to AWS ECR  #########

Retrieve an authentication token and authenticate your Docker client to your registry.
Use the AWS CLI:


login#

aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 992382358200.dkr.ecr.ap-south-1.amazonaws.com

Note: If you receive an error using the AWS CLI, make sure that you have the latest version of the AWS CLI and Docker installed an create a role and give ecr permissions and attach to ec2.

Build your Docker image using the following command. For information on building a Docker file from scratch see the instructions here . You can skip this step if your image is already built:

docker build -t maventomcat .  # optional 
After the build completes, tag your image so you can push the image to this repository:

Tagging #

docker tag maventomcat:latest 992382358200.dkr.ecr.ap-south-1.amazonaws.com/maventomcat:latest
Run the following command to push this image to your newly created AWS repository:

Push #
docker push 992382358200.dkr.ecr.ap-south-1.amazonaws.com/maventomcat:latest







